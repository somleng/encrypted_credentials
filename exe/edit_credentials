#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "optparse"
require "tempfile"
require "fileutils"
require "securerandom"
require "encrypted_credentials/encrypted_file"
require "encrypted_credentials/coder"

Options = Struct.new(:credentials_filepath, :key, :environment, :config_dir, :editor)
DEFAULT_CONFIG_DIR = Pathname(File.expand_path("config", Dir.pwd))
DEFAULT_CREDENTIALS_FILENAME = "credentials.yml.enc"
DEFAULT_KEY_FILENAME = "master.key"
DEFAULT_EDITOR = "vi"

options = Options.new

parser = OptionParser.new do |opts|
  opts.banner = "Usage: edit_credentials [options]"

  opts.on("-e", "--environment ENVIRONMENT", "Application environment. Default: $APP_ENV") { |o| options.environment = o.to_s }
  opts.on("-f", "--credentials-file FILENAME", "Encrypted credentials file. Default: #{DEFAULT_CONFIG_DIR.join(DEFAULT_CREDENTIALS_FILENAME)}") { |o| options.credentials_filepath = Pathname(o) }
  opts.on("-k", "--key-file KEY_FILE", "Key file. Default: $APP_MASTER_KEY") { |o| options.key = File.read(o).chomp }
  opts.on("-c", "--config-dir CONFIG_DIR", "Config directory. Default: #{DEFAULT_CONFIG_DIR}") { |o| options.config_directory = Pathname(o) }
  opts.on("--editor EDITOR", "Editor. Default: $EDITOR") { |o| options.editor = o }
end

parser.parse!

options.config_dir ||= DEFAULT_CONFIG_DIR
options.editor ||= ENV.fetch("EDITOR", DEFAULT_EDITOR)
options.environment ||= ENV["APP_ENV"]
options.key ||= ENV["APP_MASTER_KEY"]

environment_credentials = !options.environment.nil?
options.credentials_filepath ||= environment_credentials ? options.config_dir.join("credentials", "#{options.environment}.yml.enc") : options.config_dir.join(DEFAULT_CREDENTIALS_FILENAME)
key_filepath = environment_credentials ? options.config_dir.join("credentials", "#{options.environment}.key") : options.config_dir.join("master.key")
options.key ||= key_filepath.read.chomp if key_filepath.exist?

generate_key = !options.credentials_filepath.exist? && options.key.nil?
key = generate_key ? SecureRandom.alphanumeric(64) : options.key

raise(ArgumentError, "Missing key. Set $APP_MASTER_KEY or create key file: #{key_filepath}") if key.nil?

FileUtils.mkdir_p(options.credentials_filepath.dirname)

coder = EncryptedCredentials::Coder.new(key:)
encrypted_file = EncryptedCredentials::EncryptedFile.new(file: options.credentials_filepath, coder:)

Tempfile.create(options.credentials_filepath.basename.to_s) do |tmpfile|
  if options.credentials_filepath.exist?
    tmpfile.write(encrypted_file.read)
    tmpfile.flush
    tmpfile.rewind
  end

  system("#{options.editor} #{tmpfile.path}")

  updated_content = File.read(tmpfile)
  encrypted_file.write(updated_content)
  File.write(key_filepath, key) if generate_key
end
